pip install nltk spacy scikit-learn

!python -m spacy download en_core_web_sm
import nltk
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import random

# Download necessary resources (run only once)
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/wordnet')
except LookupError:
    nltk.download('wordnet')

# Load SpaCy model
nlp = spacy.load("en_core_web_sm")


# Sample Intent Data
intents = {
    "greeting": {
        "patterns": ["hello", "hi", "good morning", "hey", "what's up"],
        "responses": ["Hello there!", "Hi!", "Hey!", "How can I help you today?"]
    },
    "goodbye": {
        "patterns": ["bye", "goodbye", "see you later", "farewell", "gotta go"],
        "responses": ["Goodbye!", "Bye!", "See you later!", "Have a nice day!"]
    },
    "how_are_you": {
        "patterns": ["how are you", "how's it going", "how you doing?"],
        "responses": ["I'm doing well, thank you!", "I'm good, how about you?", "All good on my end."]
    },
    "thanks": {
        "patterns": ["thanks", "thank you", "appreciate it"],
        "responses": ["You're welcome!", "No problem!", "Glad I could help!"]
    },
     "bot_help": {
        "patterns": ["what can you do", "what are you", "help"],
        "responses": ["I am a chatbot, here to answer simple questions based on my data set.", "I am an AI model that can provide simple responses", "I can help you with simple text-based queries"]
    },
    "question_time":{
        "patterns": ["What time is it now?", "time", "current time"],
        "responses": ["I do not have access to the current time"]
    },
    "question_weather":{
        "patterns": ["What's the weather like?", "How is the weather"],
        "responses": ["I cannot provide accurate weather information. Please check an external weather application"]
    },
    "question_date":{
        "patterns": ["what's the date today", "what's the date", "today's date"],
        "responses": ["I cannot provide the current date, as I do not have access to the external internet or data sources."]
    },
    "default": {
        "patterns": [], # Empty for when no pattern is recognized
        "responses": ["I'm sorry, I didn't understand that.", "Could you please rephrase?", "I'm still learning, try another way."]
    }
}

def preprocess_text(text):
    doc = nlp(text.lower())
    tokens = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and not token.is_space]
    return " ".join(tokens)
def train_model(intents):
    all_patterns = []
    all_labels = []

    for intent_label, intent_data in intents.items():
      for pattern in intent_data["patterns"]:
          all_patterns.append(preprocess_text(pattern))
          all_labels.append(intent_label)

    vectorizer = TfidfVectorizer()
    vectorizer.fit(all_patterns)
    return vectorizer, all_labels, all_patterns
def predict_intent(user_input, vectorizer, all_labels, all_patterns):
    processed_input = preprocess_text(user_input)
    input_vector = vectorizer.transform([processed_input])
    pattern_vectors = vectorizer.transform(all_patterns)
    similarities = cosine_similarity(input_vector, pattern_vectors)

    best_match_index = similarities.argmax()
    best_match_label = all_labels[best_match_index]

    return best_match_label

def get_response(intent, intents):
  if intent in intents:
    return random.choice(intents[intent]["responses"])
  else:
      return random.choice(intents["default"]["responses"])

def chatbot(intents):
    vectorizer, all_labels, all_patterns = train_model(intents)
    print("Chatbot: Hello! How can I assist you today?")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            print("Chatbot: Goodbye!")
            break

        intent = predict_intent(user_input, vectorizer, all_labels, all_patterns)
        response = get_response(intent, intents)
        print("Chatbot:", response)

if __name__ == "__main__":
    chatbot(intents)
